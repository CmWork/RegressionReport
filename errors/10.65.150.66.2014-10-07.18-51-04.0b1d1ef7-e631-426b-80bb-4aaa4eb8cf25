(dp1
S'output'
p2
S"<type 'exceptions.RuntimeError'> File C:\\web2py\\applications\\RegressionReport\\databases\\c8b669d15150d7109e5f7ab36744a5b7_reviews.table appears corrupted"
p3
sS'layer'
p4
S'C:\\web2py\\applications\\RegressionReport\\models\\db.py'
p5
sS'code'
p6
S"# -*- coding: utf-8 -*-\n\n#########################################################################\n## This scaffolding model makes your app work on Google App Engine too\n## File is released under public domain and you can use without limitations\n#########################################################################\nfrom gluon import current\nfrom gluon.custom_import import track_changes\ntrack_changes(True)\n\n## if SSL/HTTPS is properly configured and you want all HTTP requests to\n## be redirected to HTTPS, uncomment the line below:\n# request.requires_https()\n\nif not request.env.web2py_runtime_gae:\n    ## if NOT running on Google App Engine use SQLite or other DB\n    db = DAL('sqlite://storage.sqlite', migrate=True)\n    current.db = db\nelse:\n    ## connect to Google BigTable (optional 'google:datastore://namespace')\n    db = DAL('google:datastore')\n    ## store sessions and tickets there\n    session.connect(request, response, db=db)\n    ## or store session in Memcache, Redis, etc.\n    ## from gluon.contrib.memdb import MEMDB\n    ## from google.appengine.api.memcache import Client\n    ## session.connect(request, response, db = MEMDB(Client()))\n\n## by default give a view/generic.extension to all actions from localhost\n## none otherwise. a pattern can be 'controller/function.extension'\nresponse.generic_patterns = ['*'] if request.is_local else []\n## (optional) optimize handling of static files\n# response.optimize_css = 'concat,minify,inline'\n# response.optimize_js = 'concat,minify,inline'\n## (optional) static assets folder versioning\n# response.static_version = '0.0.0'\n#########################################################################\n## Here is sample code if you need for\n## - email capabilities\n## - authentication (registration, login, logout, ... )\n## - authorization (role based authorization)\n## - services (xml, csv, json, xmlrpc, jsonrpc, amf, rss)\n## - old style crud actions\n## (more options discussed in gluon/tools.py)\n#########################################################################\n\nfrom gluon.tools import Auth, Crud, Service, PluginManager, prettydate\nauth = Auth(db)\ncrud, service, plugins = Crud(db), Service(), PluginManager()\n\n## create all tables needed by auth if not custom tables\nauth.define_tables(username=False, signature=False)\n\n## configure email\nmail = auth.settings.mailer\nmail.settings.server = 'logging' or 'smtp.gmail.com:587'\nmail.settings.sender = 'you@gmail.com'\nmail.settings.login = 'username:password'\n\n## configure auth policy\nauth.settings.registration_requires_verification = False\nauth.settings.registration_requires_approval = False\nauth.settings.reset_password_requires_verification = True\n\n## if you need to use OpenID, Facebook, MySpace, Twitter, Linkedin, etc.\n## register with janrain.com, write your domain:api_key in private/janrain.key\nfrom gluon.contrib.login_methods.rpx_account import use_janrain\nuse_janrain(auth, filename='private/janrain.key')\n\n#########################################################################\n## Define your tables below (or better in another model file) for example\n##\n## >>> db.define_table('mytable',Field('myfield','string'))\n##\n## Fields can be 'string','text','password','integer','double','boolean'\n##       'date','time','datetime','blob','upload', 'reference TABLENAME'\n## There is an implicit 'id integer autoincrement' field\n## Consult manual for more options, validators, etc.\n##\n## More API examples for controllers:\n##\n## >>> db.mytable.insert(myfield='value')\n## >>> rows=db(db.mytable.myfield=='value').select(db.mytable.ALL)\n## >>> for row in rows: print row.id, row.myfield\n#########################################################################\n\ndb.define_table('jobs',\n                Field('jobName', 'string'),\n                Field('beingFixed', 'boolean')\n                )\n#db.executesql('CREATE INDEX IF NOT EXISTS myidx ON jobs (jobName);')\n#db.executesql('CREATE INDEX IF NOT EXISTS myidx ON jobs (beingFixed);')\ndb.define_table('runs',\n                Field('jobId', 'integer'),\n                Field('build', 'string'),\n                Field('date', 'string'),\n                Field('runLink', 'string')\n                )\n#db.executesql('CREATE INDEX IF NOT EXISTS myidx ON runs (build);')\n#db.executesql('CREATE INDEX IF NOT EXISTS myidx ON runs (date);')\ndb.define_table('modules',\n                Field('moduleName', 'string')\n                )\n#db.executesql('CREATE INDEX IF NOT EXISTS myidx ON modules (moduleName);')\ndb.define_table('testcases',\n                Field('testcaseName', 'string'),\n                Field('testcaseLink', 'string')\n                )\ndb.define_table('failures',\n                Field('testcaseId', 'integer'),\n                Field('runId', 'integer'),\n                Field('moduleId', 'integer'),\n                Field('failStatus', requires=IS_IN_SET(('F', 'NA'))),\n                Field('failLink', 'string'),\n                Field('failCnt', 'integer', represent=lambda val,row: db(db.failures.testcaseId == row.failures.testcaseId).count())\n                )\n#db.executesql('CREATE INDEX IF NOT EXISTS myidx ON failures (testcaseId);')\n#db.executesql('CREATE INDEX IF NOT EXISTS myidx ON failures (runId);')\ndb.define_table('reviews',\n                Field('failureId', 'integer', requires=IS_NOT_EMPTY()),\n                Field('reviewDate', 'string', requires=IS_NOT_EMPTY()),\n                Field('user', 'string', requires=IS_NOT_EMPTY(), length=3),\n                Field('failure', 'string', requires=IS_NOT_EMPTY()),\n                Field('occurrence', requires=IS_IN_SET(('Constant', 'Intermittent', 'Don\\'t Know'))),\n                Field('reason', 'string', requires=IS_NOT_EMPTY()),\n                Field('action', requires=IS_IN_SET(('BDC to investigate', 'HNL to investigate', 'IDC to investigate', 'Other to investigate', 'Set to Being Fixed', 'Create CR', 'Modify Script', 'Instrument Code', 'Replicate Failure', 'No Action', 'Fixed'))),\n                Field('notes', 'string'),\n                Field('latest', 'boolean')\n                )\ndb.executesql('CREATE INDEX IF NOT EXISTS myidx ON reviews (failureId);')\n\n## after defining tables, uncomment below to enable auditing\n# auth.enable_record_versioning(db)\n"
p7
sS'snapshot'
p8
(dp9
S'exception'
p10
(dp11
S'__hash__'
p12
S"<method-wrapper '__hash__' of exceptions.RuntimeError object>"
p13
sS'__setattr__'
p14
S"<method-wrapper '__setattr__' of exceptions.RuntimeError object>"
p15
sS'__reduce_ex__'
p16
S'<built-in method __reduce_ex__ of exceptions.RuntimeError object>'
p17
sS'__getslice__'
p18
S"<method-wrapper '__getslice__' of exceptions.RuntimeError object>"
p19
sS'__getitem__'
p20
S"<method-wrapper '__getitem__' of exceptions.RuntimeError object>"
p21
sS'__setstate__'
p22
S'<built-in method __setstate__ of exceptions.RuntimeError object>'
p23
sS'__reduce__'
p24
S'<built-in method __reduce__ of exceptions.RuntimeError object>'
p25
sS'__str__'
p26
S"<method-wrapper '__str__' of exceptions.RuntimeError object>"
p27
sS'__format__'
p28
S'<built-in method __format__ of exceptions.RuntimeError object>'
p29
sS'__getattribute__'
p30
S"<method-wrapper '__getattribute__' of exceptions.RuntimeError object>"
p31
sS'__class__'
p32
S"<type 'exceptions.RuntimeError'>"
p33
sS'__unicode__'
p34
S'<built-in method __unicode__ of exceptions.RuntimeError object>'
p35
sS'__delattr__'
p36
S"<method-wrapper '__delattr__' of exceptions.RuntimeError object>"
p37
sS'__subclasshook__'
p38
S'<built-in method __subclasshook__ of type object>'
p39
sS'__repr__'
p40
S"<method-wrapper '__repr__' of exceptions.RuntimeError object>"
p41
sS'args'
p42
S"(r'File C:\\web2py\\applications\\RegressionReport\\dat...09e5f7ab36744a5b7_reviews.table appears corrupted',)"
p43
sS'__dict__'
p44
S'{}'
p45
sS'__sizeof__'
p46
S'<built-in method __sizeof__ of exceptions.RuntimeError object>'
p47
sS'__doc__'
p48
S"'Unspecified run-time error.'"
p49
sS'__init__'
p50
S"<method-wrapper '__init__' of exceptions.RuntimeError object>"
p51
sS'__new__'
p52
S'<built-in method __new__ of type object>'
p53
ssS'evalue'
p54
S'File C:\\web2py\\applications\\RegressionReport\\databases\\c8b669d15150d7109e5f7ab36744a5b7_reviews.table appears corrupted'
p55
sS'request'
p56
cgluon.html
XML_unpickle
p57
(S's\xf7Q\x00\x00<div><table><tr><td style="font-weight:bold;vertical-align:top;">ajax</td><td style="vertical-align:top;">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">application</td><td style="vertical-align:top;">:</td><td><div>RegressionReport</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">args</td><td style="vertical-align:top;">:</td><td><div><table></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">cid</td><td style="vertical-align:top;">:</td><td><div>None</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">client</td><td style="vertical-align:top;">:</td><td><div>10.65.150.66</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">controller</td><td style="vertical-align:top;">:</td><td><div>default</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">cookies</td><td style="vertical-align:top;">:</td><td><div><table><tr><td style="font-weight:bold;vertical-align:top;">session_id_regressionreport</td><td style="vertical-align:top;">:</td><td><div>10.65.150.66-db132e22-8b58-40d4-a0b4-ce3c06221f8b<table><tr><td style="font-weight:bold;vertical-align:top;">comment</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">domain</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">expires</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">httponly</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">max-age</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">path</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">secure</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">version</td><td style="vertical-align:top;">:</td><td><div></div></td></tr></table></div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">env</td><td style="vertical-align:top;">:</td><td><div><table><tr><td style="font-weight:bold;vertical-align:top;">HTTP_ACCEPT</td><td style="vertical-align:top;">:</td><td><div>text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">HTTP_ACCEPT_ENCODING</td><td style="vertical-align:top;">:</td><td><div>gzip,deflate,sdch</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">HTTP_ACCEPT_LANGUAGE</td><td style="vertical-align:top;">:</td><td><div>en-US,en;q=0.8,zh-CN;q=0.6</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">HTTP_CONNECTION</td><td style="vertical-align:top;">:</td><td><div>keep-alive</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">HTTP_COOKIE</td><td style="vertical-align:top;">:</td><td><div>session_id_regressionreport=10.65.150.66-db132e22-8b58-40d4-a0b4-ce3c06221f8b</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">HTTP_HOST</td><td style="vertical-align:top;">:</td><td><div>honvm-regstore:8080</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">HTTP_REFERER</td><td style="vertical-align:top;">:</td><td><div>http://honvm-regstore:8080/RegressionReport/default/index?keywords=reviews.latest+%3D+%22on%22+and+reviews.action+contains+%22to+investigate%22+