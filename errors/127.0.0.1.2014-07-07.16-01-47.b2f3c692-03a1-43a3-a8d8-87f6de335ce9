(dp1
S'output'
p2
S"<type 'exceptions.SyntaxError'> define_table argument is not a Field or Table: None"
p3
sS'layer'
p4
S'C:\\web2py\\applications\\RegressionReport\\controllers/default.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\n# this file is released under public domain and you can use without limitations\n\n#########################################################################\n## This is a sample controller\n## - index is the default action of any application\n## - user is required for authentication and authorization\n## - download is for downloading files uploaded in the db (does streaming)\n## - call exposes all registered services (none by default)\n#########################################################################\nfrom loadxls import load\nimport datetime\n\ndef index():\n    # Date\n    date = SQLFORM.factory(Field(\'d\', \'date\', label=\'Date\',widget=SQLFORM.widgets.date.widget, requires = IS_NOT_EMPTY()), None)\n    \n    # Grid\n    db.reviews.id.readable=False # Since we do not want to expose the id field on the grid\n    db.reviews.id.writable=False\n    db.reviews.failureId.writable=False\n    db.reviews.reviewDate.writable=False\n    db.runs.runLink.readable=False\n    db.testcases.testcaseLink.readable=False\n    db.failures.failLink.readable=False\n\n    #Define the query object. Here we are pulling all contacts having date of birth less than 18 Nov 1990\n    queryStr = (db.reviews.failureId == db.failures.id)&(db.failures.testcaseId == db.testcases.id)&(db.failures.runId == db.runs.id)&(db.failures.moduleId == db.modules.id)&(db.runs.jobId == db.jobs.id)\n    query=(queryStr)\n\n    #Define the fields to show on grid. Note: (you need to specify id field in fields section in 1.99.2\n    # this is not required in later versions)\n    fields = (db.jobs.jobName, db.jobs.branch, \n              db.runs.build, db.runs.date, db.runs.runLink,\n              db.modules.moduleName, \n              db.testcases.testcaseName, db.testcases.testcaseLink,\n              db.failures.failStatus, db.failures.failLink,\n              db.reviews.id, db.reviews.reviewDate, db.reviews.failure, db.reviews.occurrence, db.reviews.reason, db.reviews.action, db.reviews.notes)\n\n    db.jobs.jobName.represent = lambda val,row: A(val, _href=row.runs.runLink) if row.runs.runLink is not None else val\n    db.testcases.testcaseName.represent = lambda val,row: A(val, _href=row.testcases.testcaseLink) if row.testcases.testcaseLink is not None else val\n    db.failures.failStatus.represent = lambda val,row: A(val, _href=row.failures.failLink) if row.failures.failLink is not None else val\n    \n    #Define headers as tuples/dictionaries\n    headers = {\'jobs.jobName\': \'Job Name\',\n               \'jobs.branch\': \'Branch\',\n               \'runs.build\': \'Build\',\n               \'runs.date\': \'Date\',\n               \'modules.moduleName\': \'Module\',\n               \'testcases.testcaseName\': \'Test Case\',\n               \'failures.failStatus\': \'Status\',\n               \'reviews.reviewDate\': \'Review Date\',\n               \'reviews.failure\': \'Failure\',\n               \'reviews.occurrence\': \'Occurrence\',\n               \'reviews.reason\': \'Reason\',\n               \'reviews.action\': \'Action\',\n               \'reviews.notes\': \'Notes\'}\n\n    #Let\'s specify a default sort order\n    default_sort_order=[db.runs.date]\n\n    # Export classes\n    exportclasses=dict(\n        csv_with_hidden_cols=(True, \'CSV (hidden cols)\'),\n        xml=False,\n        html=False,\n        csv=False,\n        json=(True, \'JSON\'),\n        tsv_with_hidden_cols=False,\n        tsv=False)\n    \n    #Creating the grid object\n    grid = SQLFORM.grid(query=query, fields=fields, field_id=db.reviews.id, headers=headers, orderby=default_sort_order,\n                create=True, deletable=True, editable=True, exportclasses=exportclasses, maxtextlength=250, paginate=100, user_signature=False)\n\n    form=FORM(\'Load Report:\',\n        INPUT(_type=\'file\', _name=\'reportFile\', requires=IS_NOT_EMPTY()),\n        INPUT(_type=\'submit\', _value=\'Load Report\'))\n\n    loaded = None\n    if form.accepts(request,session):\n        response.flash = \'form accepted\'\n        filename = request.vars.reportFile.filename\n        data = request.vars.reportFile.file.read()\n        xlsLoader = load.XlsLoader()\n        loadComplete = xlsLoader.load(filename, data)\n        if loadComplete is not None:\n            loaded = \'File \' + filename + \' is loaded\'\n        else:\n            loaded = \'File \' + filename + \' failed to load\'\n    elif form.errors:\n        response.flash = \'form has errors\'\n    \n    return dict(date=date, form=form, loaded=loaded, grid=grid)\n\n\ndef create():\n    """\n    Generates a form corresponding to the model and\n    renders it, if the form sends some data, the function\n    validates the data and saves the data in the database.\n    """\n\n    response.flash = T("This is the create page")\n    form = SQLFORM(db.reviews)\n    if form.process().accepted:\n        response.flash = \'form accepted\'\n    elif form.errors:\n        response.flash = \'form has errors\'\n    else:\n        response.flash = \'please fill the form\'\n    return dict(form=form)\n\n\ndef edit():\n    """\n    The function pre-populates the data from the note instance\n    that has been requested to be edited and renders it,\n    once client sends in some data, it saves it in the database\n    """\n\n    review = db.reviews(request.args(0)) or redirect(URL(\'error\'))\n    form = SQLFORM(db.reviews, review, deletable=True)\n    if form.validate():\n        if form.deleted:\n            db(db.reviews.id==review.id).delete()\n            redirect(URL(\'index\'))\n        else:\n            review.update_record(**dict(form.vars))\n            response.flash = \'records changed\'\n    else:\n        response.flash = \'Something went wrong\'\n    return dict(form=form)\n\n\ndef user():\n    """\n    exposes:\n    http://..../[app]/default/user/login\n    http://..../[app]/default/user/logout\n    http://..../[app]/default/user/register\n    http://..../[app]/default/user/profile\n    http://..../[app]/default/user/retrieve_password\n    http://..../[app]/default/user/change_password\n    http://..../[app]/default/user/manage_users (requires membership in\n    use @auth.requires_login()\n        @auth.requires_membership(\'group name\')\n        @auth.requires_permission(\'read\',\'table name\',record_id)\n    to decorate functions that need access control\n    """\n    return dict(form=auth())\n\n@cache.action()\ndef download():\n    """\n    allows downloading of uploaded files\n    http://..../[app]/default/download/[filename]\n    """\n    return response.download(request, db)\n\n\ndef call():\n    """\n    exposes services. for example:\n    http://..../[app]/default/call/jsonrpc\n    decorate with @services.jsonrpc the functions to expose\n    supports xml, json, xmlrpc, jsonrpc, amfrpc, rss, csv\n    """\n    return service()\n\n\n@auth.requires_signature()\ndef data():\n    """\n    http://..../[app]/default/data/tables\n    http://..../[app]/default/data/create/[table]\n    http://..../[app]/default/data/read/[table]/[id]\n    http://..../[app]/default/data/update/[table]/[id]\n    http://..../[app]/default/data/delete/[table]/[id]\n    http://..../[app]/default/data/select/[table]\n    http://..../[app]/default/data/search/[table]\n    but URLs must be signed, i.e. linked with\n      A(\'table\',_href=URL(\'data/tables\',user_signature=True))\n    or with the signed load operator\n      LOAD(\'default\',\'data.load\',args=\'tables\',ajax=True,user_signature=True)\n    """\n    return dict(form=crud())\n\nresponse._vars=response._caller(index)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/home/mdipierro/make_web2py/web2py/gluon/restricted.py", line 220, in restricted\n  File "C:\\web2py\\applications\\RegressionReport\\controllers/default.py", line 189, in <module>\n  File "/home/mdipierro/make_web2py/web2py/gluon/globals.py", line 385, in <lambda>\n  File "C:\\web2py\\applications\\RegressionReport\\controllers/default.py", line 16, in index\n    date = SQLFORM.factory(Field(\'d\', \'date\', label=\'Date\',widget=SQLFORM.widgets.date.widget, requires = IS_NOT_EMPTY()), None)\n  File "/home/mdipierro/make_web2py/web2py/gluon/sqlhtml.py", line 1651, in factory\n  File "/home/mdipierro/make_web2py/web2py/gluon/dal.py", line 8223, in define_table\n  File "/home/mdipierro/make_web2py/web2py/gluon/dal.py", line 8240, in lazy_define_table\n  File "/home/mdipierro/make_web2py/web2py/gluon/dal.py", line 8725, in __init__\nSyntaxError: define_table argument is not a Field or Table: None\n'
p11
s.