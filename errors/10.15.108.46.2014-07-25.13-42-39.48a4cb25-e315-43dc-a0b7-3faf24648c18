(dp1
S'output'
p2
S"<type 'exceptions.IOError'> [Errno 9] Bad file descriptor"
p3
sS'layer'
p4
S'C:\\web2py\\applications\\RegressionReport\\controllers/default.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\n# this file is released under public domain and you can use without limitations\n\n#########################################################################\n## This is a sample controller\n## - index is the default action of any application\n## - user is required for authentication and authorization\n## - download is for downloading files uploaded in the db (does streaming)\n## - call exposes all registered services (none by default)\n#########################################################################\nfrom loadxls import load\nfrom spiaceReport import spiaceReport\nimport datetime\nimport os\n\n\ndef index():\n    \'\'\'sync=FORM(\'Sync:\', INPUT(_type=\'submit\', _value=\'Sync\'))\n    if sync.accepts(request,session):\n        print \'SYNCING ...\'\n        filename = os.path.join(request.folder, \'modules\\spiaceReport\', \'spiaceConfig.ini\')\n        spiaceReport.runSync(filename)\n        response.flash = \'Running sync\'\n    \'\'\'\n    \n    # Today\n    date_today = datetime.datetime.now()\n    today = date_today.strftime(\'%Y.%m.%d\')\n    \n    # Yesterday\n    date_yesterday = date_today - datetime.timedelta(days=1)\n    yesterday = date_yesterday.strftime(\'%Y.%m.%d\')\n    \n    # Grid\n    db.reviews.id.readable=False # Since we do not want to expose the id field on the grid\n    db.reviews.id.writable=False\n    db.reviews.failureId.readable=False\n    db.reviews.failureId.writable=False\n    db.reviews.reviewDate.writable=False\n    db.runs.runLink.readable=False\n    db.testcases.testcaseLink.readable=False\n    db.failures.testcaseId.readable=False\n    db.failures.failLink.readable=False\n\n    #Define the query object. Here we are pulling all contacts having date of birth less than 18 Nov 1990\n    queryStr = (db.reviews.failureId == db.failures.id)&(db.failures.testcaseId == db.testcases.id)&(db.failures.runId == db.runs.id)&(db.failures.moduleId == db.modules.id)&(db.runs.jobId == db.jobs.id)\n    query=(queryStr)\n\n    #Define the fields to show on grid. Note: (you need to specify id field in fields section in 1.99.2\n    # this is not required in later versions)\n    fields = (db.jobs.jobName, db.jobs.beingFixed,\n              db.runs.build, db.runs.date, db.runs.runLink,\n              db.modules.moduleName, \n              db.testcases.testcaseName, db.testcases.testcaseLink,\n              db.failures.testcaseId, db.failures.failStatus, db.failures.failLink, \n              db.reviews.id, db.reviews.failureId, db.reviews.reviewDate, db.reviews.user, db.reviews.failure, db.reviews.occurrence, db.reviews.reason, db.reviews.action, db.reviews.notes,\n              db.failures.failCnt)\n\n    db.jobs.jobName.represent = lambda val,row: A(val, _href=row.runs.runLink) if row.runs.runLink is not None else val\n    db.testcases.testcaseName.represent = lambda val,row: A(val, _href=row.testcases.testcaseLink) if row.testcases.testcaseLink is not None else val\n    db.failures.failStatus.represent = lambda val,row: A(val, _href=row.failures.failLink) if row.failures.failLink is not None else val\n    \n    #Define headers as tuples/dictionaries\n    headers = {\'jobs.jobName\': \'Job Name\',\n               \'jobs.beingFixed\': \'Fix\',\n               \'runs.build\': \'Build\',\n               \'runs.date\': \'Date\',\n               \'modules.moduleName\': \'Module\',\n               \'testcases.testcaseName\': \'Test Case\',\n               \'failures.failStatus\': \'\',\n               \'reviews.reviewDate\': \'Review Date\',\n               \'reviews.user\': \'User\',\n               \'reviews.failure\': \'Failure\',\n               \'reviews.occurrence\': \'Occurrence\',\n               \'reviews.reason\': \'Reason\',\n               \'reviews.action\': \'Action\',\n               \'reviews.notes\': \'Notes\',\n               \'failures.failCnt\': \'#\'}\n    \'\'\'{\'jobs.jobName\':{\'label\':\'Job Name\', \'class\':\'th\', \'width\':\'150\', \'truncate\':25, \'selected\':False}, \n               \'jobs.beingFixed\':{\'label\':\'User\', \'class\':\'th\', \'width\':\'30\', \'truncate\':25, \'selected\':False}, \n               \'reviews.failure\':{\'label\':\'Failure\', \'class\':\'th\', \'width\':\'500\', \'truncate\':250, \'selected\':False}, \n               \'reviews.occurrence\':{\'label\':\'Occurrence\', \'class\':\'th\', \'width\':\'50\', \'truncate\':15, \'selected\':False}, \n               \'reviews.reason\':{\'label\':\'Reason\', \'class\':\'th\', \'width\':\'500\', \'truncate\':100, \'selected\':False}, \n               \'reviews.action\':{\'label\':\'Action\', \'class\':\'th\', \'width\':\'65\', \'truncate\':50, \'selected\':False}, \n               \'reviews.notes\':{\'label\':\'Notes\', \'class\':\'th\', \'width\':\'500\', \'truncate\':500, \'selected\':False}}\'\'\'\n    \n    #Let\'s specify a default sort order\n    default_sort_order=[~db.runs.date|~db.reviews.reviewDate]\n\n    # Export classes\n    exportclasses=dict(\n        csv_with_hidden_cols=False,\n        xml=False,\n        html=False,\n        csv=False,\n        json=False,\n        tsv_with_hidden_cols=False,\n        tsv=False)\n    \n    # Links\n    links = [lambda row: linksHelper(row)]\n    \n    #Creating the grid object\n    grid = SQLFORM.grid(query=query, fields=fields, field_id=db.reviews.id, headers=headers, orderby=default_sort_order, groupby=db.reviews.failureId, details=False, links=links, create=False, deletable=False, editable=False, exportclasses=exportclasses, maxtextlength=250, paginate=25, user_signature=False)\n\n    form=FORM(\'Load Report:\',\n        INPUT(_type=\'file\', _name=\'reportFile\', requires=IS_NOT_EMPTY()),\n        INPUT(_type=\'submit\', _value=\'Load Report\'))\n\n    loaded = None\n    if form.accepts(request,session):\n        response.flash = \'form accepted\'\n        filename = request.vars.reportFile.filename\n        data = request.vars.reportFile.file.read()\n        xlsLoader = load.XlsLoader()\n        loadComplete = xlsLoader.load(filename, data)\n        if loadComplete is not None:\n            loaded = \'File \' + filename + \' is loaded\'\n        else:\n            loaded = \'File \' + filename + \' failed to load\'\n    elif form.errors:\n        response.flash = \'form has errors\'\n    \n    return dict(form=form, loaded=loaded, grid=grid, today=today, yesterday=yesterday) #, sync=sync)\n\n\ndef linksHelper(row):\n    html_code = A(\'Filter\',_href=URL("default","index",vars={\'keywords\' : \'testcases.testcaseName="\' + row.testcases.testcaseName + \'"\' }, url_encode=True))\n    html_code = html_code + BR()\n    html_code = html_code + A(\'View\',_href=URL("default","view",args=[row.reviews.failureId]))\n    html_code = html_code + BR()\n    html_code = html_code + A(\'Create\',_href=URL("default","create",args=[row.reviews.failureId]))\n    return html_code\n\n\ndef tableView (failId):\n    reviewIds = db(db.reviews.failureId==failId).select(db.reviews.id, db.reviews.failureId, db.reviews.reviewDate, db.reviews.user,db.reviews.failure, db.reviews.occurrence, db.reviews.reason, db.reviews.action, db.reviews.notes, orderby=~db.reviews.reviewDate)\n    if len(reviewIds) == 1 and reviewIds[0].failure == \'\':\n        row = reviewIds[0]\n        redirect(URL("default", "edit", args=[row.id, row.failureId, True]))\n    \n    columns = [\'reviews.reviewDate\', \'reviews.user\', \'reviews.failure\', \'reviews.occurrence\', \'reviews.reason\', \'reviews.action\', \'reviews.notes\']\n\n    headers = {\'reviews.reviewDate\':{\'label\':\'Date\', \'class\':\'th\', \'width\':\'25\', \'truncate\':25, \'selected\':False}, \n               \'reviews.user\':{\'label\':\'User\', \'class\':\'th\', \'width\':\'10\', \'truncate\':10, \'selected\':False}, \n               \'reviews.failure\':{\'label\':\'Failure\', \'class\':\'th\', \'width\':\'500\', \'truncate\':1000, \'selected\':False}, \n               \'reviews.occurrence\':{\'label\':\'Occurrence\', \'class\':\'th\', \'width\':\'50\', \'truncate\':15, \'selected\':False}, \n               \'reviews.reason\':{\'label\':\'Reason\', \'class\':\'th\', \'width\':\'500\', \'truncate\':1000, \'selected\':False}, \n               \'reviews.action\':{\'label\':\'Action\', \'class\':\'th\', \'width\':\'65\', \'truncate\':50, \'selected\':False}, \n               \'reviews.notes\':{\'label\':\'Notes\', \'class\':\'th\', \'width\':\'500\', \'truncate\':1000, \'selected\':False}}\n    \n    extracolumns = [{\'label\':\'\',\n                \'class\': \'\', #class name of the header\n                \'width\':\'\', #width in pixels or %\n                \'content\':lambda row, rc: A(\'Edit\',_href=URL("default", "edit", args=[row.id, row.failureId])),\n                \'selected\': False #agregate class selected to this column\n                }]\n    \n    form = SQLTABLE(reviewIds, headers=headers, columns=columns, extracolumns=extracolumns)\n    return form\n\n\ndef view():\n    failureId = request.args(0)\n    form = tableView(failureId)\n    return dict(form=form)\n\ndef create():\n    failureId = request.args(0)\n    table = tableView(failureId)\n    \n    db.reviews.failureId.default = failureId\n    db.reviews.reviewDate.default = datetime.datetime.now().strftime(\'%Y.%m.%d %H:%M:%S\')\n    db.reviews.id.readable=False\n    db.reviews.id.writable=False\n    db.reviews.failureId.readable=False\n    db.reviews.failureId.writable=False\n    db.reviews.reviewDate.writable=False\n    form = SQLFORM(db.reviews)\n    if form.process().accepted:\n        response.flash = \'form accepted\'\n        table = tableView(failureId)\n    elif form.errors:\n        response.flash = \'form has errors\'\n    else:\n        response.flash = \'please fill the form\'\n    \n    return dict(form=form, table=table)\n\n\ndef edit():\n    hideTable = False\n    reviewId = request.args(0)\n    failureId = request.args(1)\n    if len(request.args) > 2:\n        hideTable = request.args(2)\n       \n    table = \'\'\n    if hideTable == False:\n        table = tableView(failureId)\n    \n    review = db.reviews(reviewId) or redirect(URL(\'error\'))\n    \n    if review.reviewDate == \'\':\n        review.reviewDate = datetime.datetime.now().strftime(\'%Y.%m.%d %H:%M:%S\')\n    \n    db.reviews.id.readable=False # Since we do not want to expose the id field on the grid\n    db.reviews.id.writable=False\n    db.reviews.failureId.readable=False\n    db.reviews.failureId.writable=False\n    db.reviews.reviewDate.writable=False\n    \n    form = SQLFORM(db.reviews, review, deletable=False)\n    if form.validate():\n        if form.deleted:\n            db(db.reviews.id==reviewId).delete()\n            redirect(URL(\'index\'))\n        else:\n            review.update_record(**dict(form.vars))\n            response.flash = \'records changed\'\n            table = tableView(failureId)\n\n    return dict(form=form, table=table)\n\n\ndef user():\n    """\n    exposes:\n    http://..../[app]/default/user/login\n    http://..../[app]/default/user/logout\n    http://..../[app]/default/user/register\n    http://..../[app]/default/user/profile\n    http://..../[app]/default/user/retrieve_password\n    http://..../[app]/default/user/change_password\n    http://..../[app]/default/user/manage_users (requires membership in\n    use @auth.requires_login()\n        @auth.requires_membership(\'group name\')\n        @auth.requires_permission(\'read\',\'table name\',record_id)\n    to decorate functions that need access control\n    """\n    return dict(form=auth())\n\n@cache.action()\ndef download():\n    """\n    allows downloading of uploaded files\n    http://..../[app]/default/download/[filename]\n    """\n    return response.download(request, db)\n\n\ndef call():\n    """\n    exposes services. for example:\n    http://..../[app]/default/call/jsonrpc\n    decorate with @services.jsonrpc the functions to expose\n    supports xml, json, xmlrpc, jsonrpc, amfrpc, rss, csv\n    """\n    return service()\n\n\n@auth.requires_signature()\ndef data():\n    """\n    http://..../[app]/default/data/tables\n    http://..../[app]/default/data/create/[table]\n    http://..../[app]/default/data/read/[table]/[id]\n    http://..../[app]/default/data/update/[table]/[id]\n    http://..../[app]/default/data/delete/[table]/[id]\n    http://..../[app]/default/data/select/[table]\n    http://..../[app]/default/data/search/[table]\n    but URLs must be signed, i.e. linked with\n      A(\'table\',_href=URL(\'data/tables\',user_signature=True))\n    or with the signed load operator\n      LOAD(\'default\',\'data.load\',args=\'tables\',ajax=True,user_signature=True)\n    """\n    return dict(form=crud())\n\nresponse._vars=response._caller(index)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "C:\\web2py\\gluon\\restricted.py", line 220, in restricted\n    exec ccode in environment\n  File "C:\\web2py\\applications\\RegressionReport\\controllers/default.py", line 279, in <module>\n  File "C:\\web2py\\gluon\\globals.py", line 385, in <lambda>\n    self._caller = lambda f: f()\n  File "C:\\web2py\\applications\\RegressionReport\\controllers/default.py", line 116, in index\n    loadComplete = xlsLoader.load(filename, data)\n  File "applications\\RegressionReport\\modules\\loadxls\\load.py", line 53, in load\n    self.loadToDb()\n  File "applications\\RegressionReport\\modules\\loadxls\\load.py", line 107, in loadToDb\n    print jobName\nIOError: [Errno 9] Bad file descriptor\n'
p11
s.